FROM centos:7 as phase_1

RUN sed -i 's/^installonly_limit=3/installonly_limit=60/g' /etc/yum.conf
# First install the opensource.is and consol labs repositories

# Redhat/Centos users need to install the epel repositories (fedora users skip this step)
RUN yum install -y epel-release dnf

RUN sed -i 's/^installonly_limit=3/installonly_limit=60/g' /etc/dnf/dnf.conf
RUN dnf clean all && dnf -y update

RUN dnf -y remove nagios

COPY files/ok-release.rpm /usr/src
COPY files/labs-consol-stable.rhel7.noarch.rpm /usr/src
RUN dnf -y install /usr/src/ok-release.rpm /usr/src/labs-consol-stable.rhel7.noarch.rpm
RUN unlink /usr/src/labs-consol-stable.rhel7.noarch.rpm
RUN unlink /usr/src/ok-release.rpm

# DNF
#-x nagios-common \
RUN dnf -y install -x nagios \ 
	gcc-c++ rrdtool perl-Time-HiRes perl-rrdtool php-gd php php-cli wget mlocate \
	git postfix python-pip python3-pip python3-devel python-devel acl python-setuptools \
	zsh telnet openssh-server ansible-python3 openvpn openvpn-devel rpm-build tinyproxy nodejs \
    haproxy jq chrony rng-tools automake cmake gcc tcpdump ngrep bind-utils nmap-ncat at tar npm \
    fail2ban certbot tree naemon-devel redis tmux ngrep make automake net-tools \
    nagios-plugins-tcp nagios-plugins-http nagios-plugins-users nagios-plugins-smtp nagios-plugins-procs nagios-plugins-mysql \
    nagios-plugins-mailq nagios-plugins-load nagios-plugins-dns nagios-plugins-dig nagios-plugins-disk nagios-plugins-ssh \
    nagios-plugins-ping nagios-plugins-http nagios-plugins-fping nagios-plugins-by_ssh nagios-plugins-check_cpu nagios-plugins-file_age \
    nagios-plugins-icmp nagios-plugins-nagios nagios-plugins-time nagios-plugins-swap \
    strace sqlite-devel jansson-devel mariadb-devel which go vim lsof psmisc aide sysstat chkconfig bubblewrap dstat socat \
    nagios-okplugin-check_firewall_active nagios-okplugin-check_package_updates nagios-okplugin-check_ifoperstate \
    nagios-okplugin-get_network_stat nagios-okplugin-check_disks perl-Net-DNS nagios-okplugin-check_http_multi \
    python2-speedtest-cli perl-Monitoring-Plugin perl-Switch man-db python-virtualenv libacl-devel keepalived



COPY files/daemontools-encore-1.11-1.el7.x86_64.rpm /usr/src
COPY files/ncpa-2.2.2.el7.x86_64.rpm /usr/src
RUN dnf -y install /usr/src/ncpa-2.2.2.el7.x86_64.rpm;\ 
    dnf -y install /usr/src/daemontools-encore-1.11-1.el7.x86_64.rpm;\
    unlink /usr/src/ncpa-2.2.2.el7.x86_64.rpm;\
    unlink /usr/src/daemontools-encore-1.11-1.el7.x86_64.rpm

RUN dnf --enablerepo=ok-testing install -y naemon naemon-livestatus adagios okconfig pnp4nagios


# Remove yum cache
RUN yum clean all -y && rm -rf /var/cache/yum


RUN sh -c 'dnf list > /root/.dnf'
FROM phase_1 as phase_2

{%for p in packages.pip3%}
RUN pip3 install {{p}}
{%endfor%}

COPY files/install_borg.sh /root/install_borg.sh
RUN /root/install_borg.sh
RUN unlink /root/install_borg.sh

COPY files/lynis.tar.gz /opt
RUN cd /opt && tar zxf lynis.tar.gz && unlink lynis.tar.gz

COPY files/my-public-ip.tar.gz /opt
RUN cd /opt && tar zxf my-public-ip.tar.gz && unlink my-public-ip.tar.gz

#COPY monitoring-plugins.tar.gz /usr/src
#RUN git clone https://github.com/binRick/daemontools-encore-rpm /usr/src/daemontools-encore-rpm
#RUN git clone https://github.com/binRick/jo-rpm /usr/src/jo
#RUN git clone --depth 1 https://github.com/drwetter/testssl.sh.git /opt/testssl
#RUN git clone https://github.com/CISOfy/lynis /usr/src/lynis
#RUN git clone https://github.com/auzias/my-public-ip /opt/my-public-ip
#RUN git clone https://github.com/akrherz/nagios-checks.git /usr/src/nagios-checks
#RUN git clone https://github.com/centreon/centreon-plugins.git /usr/src/centreon-plugins
#RUN git clone https://github.com/HariSekhon/Nagios-Plugins.git /usr/src/Nagios-Plugins
#RUN git clone https://github.com/hobbyquaker/check_os_release.git /usr/src/check_os_release
#RUN git clone https://github.com/bebehei/check_dnsserials.git /usr/src/check_dnsserials
#RUN git clone https://github.com/seffparker/nagios-plugins.git /usr/src/nagios-plugins1
#RUN git clone https://github.com/enzote84/nagios-plugins.git /usr/src/nagios-plugins2
#RUN git clone https://github.com/ikus060/nagios-plugins.git /usr/src/nagios-plugins3
#RUN git clone https://github.com/binRick/nagios-plugins.git /usr/src/nagios-plugins4
#RUN git clone https://github.com/PagerDuty/pdagent.git  /usr/src/pdagent
#RUN git clone https://github.com/matteocorti/check_rbl.git  /usr/src/check_rbl
#RUN git clone https://github.com/bebehei/nagios-plugin-check_borg.git /usr/src/check_borg
#RUN git clone https://github.com/jrottenberg/check_rss.git  /usr/src/check_rss
#RUN git clone https://github.com/StewLG/check_static_ip.git /usr/src/check_static_ip
#RUN git clone https://github.com/matteocorti/check_nagios_latency.git   /usr/src/check_nagios_latency
#RUN wget https://github.com/madrisan/nagios-plugins-linux/releases/download/v27/nagios-plugins-linux-27.tar.bz2 -O /usr/src/nagios-plugins-linux-27.tar.bz2
#RUN sh -c 'cd /usr/src && tar jxf nagios-plugins-linux-27.tar.bz2 && cd nagios-plugins-linux-27 && ./configure --prefix=/opt/nagios-plugins-linux && make -j install'
#
#
#RUN sh -c 'cd /usr/src && tar zxf monitoring-plugins.tar.gz && cd monitoring-plugins && ./tools/setup && ./configure --prefix=/opt/monitoring-plugins && make -j && make install'
#RUN sh -c 'cd /usr/src/daemontools-encore-rpm && ./build.sh 1.11 && rpm -ivh /root/rpmbuild/RPMS/x86_64/daemontools-encore-1.11-1.el7.x86_64.rpm'
#RUN sh -c 'cd /usr/src/jo && ./build.sh 1.4 && rpm -ivh /root/rpmbuild/RPMS/x86_64/jo-1.4-1.el7.x86_64.rpm'
COPY files/naemon_plugins /etc/sudoers.d
RUN chmod 600 /etc/sudoers.d/naemon_plugins


# Systemd - preparation
RUN (cd /lib/systemd/system/sysinit.target.wants/; for i in *; do [ $i == \
	systemd-tmpfiles-setup.service ] || rm -f $i; done); \
	rm -f /lib/systemd/system/multi-user.target.wants/*;\
	rm -f /etc/systemd/system/*.wants/*;\
	rm -f /lib/systemd/system/local-fs.target.wants/*; \
	rm -f /lib/systemd/system/sockets.target.wants/*udev*; \
	rm -f /lib/systemd/system/sockets.target.wants/*initctl*; \
	rm -f /lib/systemd/system/basic.target.wants/*;\
	rm -f /lib/systemd/system/anaconda.target.wants/*;
# Systemd - preparation ends

# Manual copies
COPY files//ttyd /usr/bin
COPY files/bwrap_exec.sh /usr/local/sbin
COPY files/bwrap_exec_with_network.sh /usr/local/sbin

# Copy Configs
COPY configs/.profile.sh /root
COPY .haproxy.cfg /etc/haproxy/haproxy.cfg


### END SOFTWARE INSTALLS

#RUN sed -i 's|^#broker_module=.*|broker_module=/usr/lib64/naemon/naemon-livestatus/livestatus.so /var/cache/naemon/live|g' /etc/naemon/naemon.cfg;\
RUN \
    sed -i 's|^debug_level=.*|debug_level=128|g' /etc/naemon/naemon.cfg;\
    sed -i 's|^debug_verbosity=.*|debug_verbosity=2|g' /etc/naemon/naemon.cfg;\
    sed -i 's|^debug_file=.*|debug_file=/var/log/naemon/debug.log|g' /etc/naemon/naemon.cfg;\
    sed -i 's|^enable_notifications=.*|enable_notifications=0|g' /etc/naemon/naemon.cfg;\
    sed -i 's|^max_concurrent_checks=.*|max_concurrent_checks=60|g' /etc/naemon/naemon.cfg;\
    sed -i 's|^use_syslog=.*|use_syslog=0|g' /etc/naemon/naemon.cfg;\
    sed -i 's|^check_workers=.*|check_workers=2|g' /etc/naemon/naemon.cfg;\
    sed -i 's|^host_down_disable_service_checks=.*|host_down_disable_service_checks=1|g' /etc/naemon/naemon.cfg


RUN sed -i 's|^.api_keys_enabled .*|api_keys_enabled = 1|g' /etc/thruk/thruk.conf;\
    sed -i 's|^.thruk_verbose .*|thruk_verbose = 1|g' /etc/thruk/thruk.conf;\
    sed -i 's|^.basic_auth_enabled .*|basic_auth_enabled = 1|g' /etc/thruk/thruk.conf;\
    sed -i 's|^.max_api_keys_per_user .*|max_api_keys_per_user = 1000|g' /etc/thruk/thruk.conf;\
    sed -i 's|^.server_timezone .*|server_timezone = Ammerica/New_York|g' /etc/thruk/thruk.conf

RUN sed -i 's/^MinSpareServers 5/MinSpareServers 1/g' /etc/tinyproxy/tinyproxy.conf;\
    sed -i 's/^MaxSpareServers 20/MaxSpareServers 2/g' /etc/tinyproxy/tinyproxy.conf;\
    sed -i 's/^StartServers 10/StartServers 1/g' /etc/tinyproxy/tinyproxy.conf

# it is a valid git repo so we have audit trail
#RUN	git init /etc/naemon ;\
#	git config user.name "admin" ;\
#	git config user.email "admin@adagios.local" ;\
#	git add . ;\
#	git commit -a -m "Initial commit"

# Fix permissions for naemon and pnp4nagios
RUN chown -R naemon:naemon \
	/etc/naemon \
	/etc/adagios \
	/var/lib/adagios \
	/var/lib/pnp4nagios \
	/var/log/pnp4nagios \
	/var/spool/pnp4nagios \
	/etc/pnp4nagios/process_perfdata.cfg \
	/var/log/okconfig
# ACL group permissions need g+rwx
RUN	chmod g+rwx -R \
	/etc/naemon \
	/etc/adagios \
	/var/lib/adagios \
	/var/lib/pnp4nagios \
	/var/log/pnp4nagios \
	/var/spool/pnp4nagios \
	/etc/pnp4nagios/process_perfdata.cfg /var/log/okconfig

RUN	setfacl -R -m group:naemon:rwx -m d:group:naemon:rwx \
	/etc/naemon/ \
	/etc/adagios \
	/var/lib/adagios \
	/var/lib/pnp4nagios \
	/var/log/pnp4nagios \
	/var/spool/pnp4nagios \
	/etc/pnp4nagios/process_perfdata.cfg \
	/var/log/okconfig

# Make sure nagios doesn't interfere
RUN	mkdir /etc/nagios/disabled ;\
	mv /etc/nagios/{nagios,cgi}.cfg /etc/nagios/disabled/

# Make objects created by adagios go to /etc/naemon/adagios
RUN	mkdir -p /etc/naemon/adagios ;\
	pynag config --append cfg_dir=/etc/naemon/adagios

# Make adagios naemon aware
RUN sed 's|/etc/nagios/passwd|/etc/thruk/htpasswd|g' -i /etc/httpd/conf.d/adagios.conf ;\
	sed 's|user=nagios|user=naemon|g' -i /etc/httpd/conf.d/adagios.conf ;\
	sed 's|group=nagios|group=naemon|g' -i /etc/httpd/conf.d/adagios.conf ;\
	sed 's|/etc/nagios/nagios.cfg|/etc/naemon/naemon.cfg|g' -i /etc/adagios/adagios.conf ;\
	sed 's|nagios_url = "/nagios|nagios_url = "/naemon|g' -i /etc/adagios/adagios.conf ;\
	sed 's|/etc/nagios/adagios/|/etc/naemon/adagios/|g' -i /etc/adagios/adagios.conf ;\
	sed 's|/etc/init.d/nagios|/etc/init.d/naemon|g' -i /etc/adagios/adagios.conf ;\
	sed 's|nagios_service = "nagios"|nagios_service = "naemon"|g' -i /etc/adagios/adagios.conf ;\
	sed 's|livestatus_path = None|livestatus_path = "/var/cache/naemon/live"|g' -i /etc/adagios/adagios.conf ;\
	sed 's|/usr/sbin/nagios|/usr/bin/naemon|g' -i /etc/adagios/adagios.conf

# Make okconfig naemon aware
RUN sed 's|/etc/nagios/nagios.cfg|/etc/naemon/naemon.cfg|g' -i /etc/okconfig.conf ;\
	sed 's|/etc/nagios/okconfig/|/etc/naemon/okconfig/|g' -i /etc/okconfig.conf ;\
	sed 's|/etc/nagios/okconfig/examples|/etc/naemon/okconfig/examples|g' -i /etc/okconfig.conf


# Add naemon to apache group so it has permissions to pnp4nagios's session files
RUN usermod -G apache naemon

# Redirect root URL to /adagios
RUN echo "RedirectMatch ^/$ /adagios" > /etc/httpd/conf.d/redirect.conf

# Allow Adagios to control the service
RUN sed 's|nagios|naemon|g' -i /etc/sudoers.d/adagios ;\
	sed 's|/usr/sbin/naemon|/usr/bin/naemon|g' -i /etc/sudoers.d/adagios

# Make naemon use nagios plugins, more people are doing it like that. And configure pnp4nagios
RUN sed -i 's|/usr/lib64/naemon/plugins|{{paths.plugins}}|g' /etc/naemon/resource.cfg ;\
	sed -i 's|/etc/nagios/passwd|{{paths.thruk.htpasswd}}|g' /etc/httpd/conf.d/pnp4nagios.conf ;\
	sed -i 's|user = nagios|user = naemon|g' /etc/pnp4nagios/npcd.cfg ;\
	sed -i 's|group = nagios|group = naemon|g' /etc/pnp4nagios/npcd.cfg

# ACL group permissions need g+rwx
RUN	chmod g+rwx -R \
	/etc/naemon \
	/etc/adagios \
	/var/lib/adagios \
	/var/lib/pnp4nagios \
	/var/log/pnp4nagios \
	/var/spool/pnp4nagios \
	/etc/pnp4nagios/process_perfdata.cfg  \
	/var/log/okconfig

RUN setfacl -R -m group:naemon:rwx -m d:group:naemon:rwx \
	/etc/naemon/ \
	/etc/adagios \
	/var/lib/adagios \
	/var/lib/pnp4nagios \
	/var/log/pnp4nagios \
	/var/spool/pnp4nagios \
	/etc/pnp4nagios/process_perfdata.cfg \
	/var/log/okconfig


# Fix permissions for naemon and pnp4nagios
RUN chown -R naemon:naemon \
	/etc/naemon \
	/etc/adagios \
	/var/lib/adagios \
	/var/lib/pnp4nagios \
	/var/log/pnp4nagios \
	/var/spool/pnp4nagios \
	/etc/pnp4nagios/process_perfdata.cfg \
	/var/log/okconfig


# Secure Adagios
RUN mv /etc/httpd/conf.d/thruk_cookie_auth_vhost.conf /etc/httpd/conf.d/thruk_cookie_auth_vhost.conf.disabled
RUN htpasswd -b /etc/thruk/htpasswd "$ADAGIOS_USER" "$ADAGIOS_PASS" ;\
	rm -f /etc/nagios/passwd ;\
	ln -s {{paths.thruk.htpasswd}} /etc/nagios/passwd


# Enable services
RUN chmod a-x /usr/lib/systemd/system/*.service
RUN systemctl enable {{' '.join(enabled_services)}}
RUN systemctl disable {{' '.join(disabled_services)}}

# Configure Ansible Paths
RUN update-alternatives --install /usr/bin/ansible          ansible          /usr/bin/ansible-3            1; \
    update-alternatives --install /usr/bin/ansible-playbook ansible-playbook /usr/bin/ansible-playbook-3   1; \
    update-alternatives --list

COPY files/.ansi /etc/.ansi

COPY files/safeu /usr/local/bin
COPY files/fzf /usr/local/bin
RUN chmod +x /usr/local/bin/safeu /usr/local/bin/fzf
RUN chmod 644 /etc/.ansi
RUN chown root:root /usr/local/bin/safeu /usr/local/bin/fzf /etc/.ansi


# Setup Shell Environment
#RUN git clone https://github.com/nojhan/liquidprompt.git /opt/liquidprompt
COPY files/liquidprompt.tar.gz /opt
RUN cd /opt && tar zxf liquidprompt.tar.gz && unlink liquidprompt.tar.gz

RUN echo '[[ $- = *i* ]] && source /opt/liquidprompt/liquidprompt && source /etc/.ansi && source ~/.profile.sh' >> /etc/bashrc
RUN echo '[[ $- = *i* ]] && source /opt/liquidprompt/liquidprompt && source /etc/.ansi && source ~/.profile.sh' >> /etc/zshrc

COPY templates/firewalld_zones_public.xml.j2 /etc/firewalld/zones/public.xml


COPY files/ops-dashboard.tar.gz /var/www
RUN cd /var/www && tar zxf ops-dashboard.tar.gz && unlink ops-dashboard.tar.gz

FROM phase_2 as phase_3

ENV container docker
ENV ADAGIOS_HOST adagios.local
ENV ADAGIOS_USER {{auth.adagios.user}}
ENV ADAGIOS_PASS {{auth.adagios.pass}}

# Enable Naemon performance data and service performance data
RUN pynag config --set "process_performance_data=1" ;\
	pynag config --set 'service_perfdata_file=/var/lib/naemon/service-perfdata' ;\
	pynag config --set 'service_perfdata_file_template=DATATYPE::SERVICEPERFDATA\tTIMET::$TIMET$\tHOSTNAME::$HOSTNAME$\tSERVICEDESC::$SERVICEDESC$\tSERVICEPERFDATA::$SERVICEPERFDATA$\tSERVICECHECKCOMMAND::$SERVICECHECKCOMMAND$\tHOSTSTATE::$HOSTSTATE$\tHOSTSTATETYPE::$HOSTSTATETYPE$\tSERVICESTATE::$SERVICESTATE$\tSERVICESTATETYPE::$SERVICESTATETYPE$' ;\
	pynag config --set 'service_perfdata_file_mode=a' ;\
	pynag config --set 'service_perfdata_file_processing_interval=15';\
	pynag config --set 'service_perfdata_file_processing_command=process-service-perfdata-file'

# host performance data
RUN pynag config --set 'host_perfdata_file=/var/lib/naemon/host-perfdata' ;\
	pynag config --set 'host_perfdata_file_template=DATATYPE::HOSTPERFDATA\tTIMET::$TIMET$\tHOSTNAME::$HOSTNAME$\tHOSTPERFDATA::$HOSTPERFDATA$\tHOSTCHECKCOMMAND::$HOSTCHECKCOMMAND$\tHOSTSTATE::$HOSTSTATE$\tHOSTSTATETYPE::$HOSTSTATETYPE$' ;\
	pynag config --set 'host_perfdata_file_mode=a' ;\
	pynag config --set 'host_perfdata_file_processing_interval=15' ;\
	pynag config --set 'host_perfdata_file_processing_command=process-host-perfdata-file'

# host commands
RUN pynag add command command_name=process-service-perfdata-file command_line='/bin/mv /var/lib/naemon/service-perfdata /var/spool/pnp4nagios/service-perfdata.$TIMET$' ;\
	pynag add command command_name=process-host-perfdata-file command_line='/bin/mv /var/lib/naemon/host-perfdata /var/spool/pnp4nagios/host-perfdata.$TIMET$' ;\
	pynag config --append cfg_dir=/etc/naemon/commands/

RUN unlink /etc/naemon/conf.d/windows.cfg;\
    unlink /etc/nagios/objects/windows.cfg;\
    unlink /etc/nagios/objects/printer.cfg;\
    unlink /etc/naemon/conf.d/switch.cfg ;\
    unlink /etc/nagios/objects/switch.cfg;\
    unlink /etc/naemon/conf.d/printer.cfg ;\
    unlink /etc/naemon/conf.d/localhost.cfg


COPY configs/localhost.cfg /etc/naemon/conf.d

RUN mkdir -p /etc/naemon/commands \
             /etc/naemon/services \
             /usr/share/okconfig/templates/whmcs \
             /etc/nagios/okconfig/examples \
             /etc/nagios/okconfig/services/whmcs \
             /etc/nagios/okconfig/commands/whmcs

RUN touch /var/log/naemon/livestatus.log && chown naemon:naemon /var/log/naemon/livestatus.log
RUN touch /var/log/naemon/debug.log && chown naemon:naemon /var/log/naemon/debug.log


COPY files/neofetch /usr/local/bin
COPY files/check_speedtest-cli.sh /usr/lib64/nagios/plugins
COPY files/check_service.pl /usr/lib64/nagios/plugins
RUN chmod +x /usr/lib64/nagios/plugins/check_speedtest-cli.sh /usr/lib64/nagios/plugins/check_service.pl /usr/local/bin/neofetch

COPY configs/resource.cfg       /etc/naemon
#COPY configs/whmcs/commands.cfg  /etc/nagios/okconfig/commands/whmcs
#COPY configs/whmcs/services.cfg  /etc/nagios/okconfig/services/whmcs
COPY configs/rendered/*.cfg      /etc/naemon/conf.d

#RUN pynag config --append cfg_dir=/etc/nagios/okconfig/services/whmcs
#RUN pynag config --append cfg_dir=/etc/nagios/okconfig/commands/whmcs

#RUN unlink /etc/naemon/objects/templates.cfg
#RUN unlink /etc/naemon/conf.d/templates.cfg
#RUN unlink /etc/naemon/resource.cfg
RUN unlink /etc/naemon/conf.d/templates/services.cfg


{%for p in added_plugins%}
COPY files/{{p.file}} {{paths.plugins}}
RUN  chmod +x {{paths.plugins}}/{{p.file}}
{%endfor%}


{%for s in daemontools_services%}
RUN mkdir -p /service/{{s.name}}/log
{%if s.start is defined and s.start|length > 0%}
RUN echo -e '#!/bin/bash\nset -e\nexec {{s.start}} 2>&1\n' > /service/{{s.name}}/start && chmod +x /service/{{s.name}}/start
{%endif%}
RUN echo -e '#!/bin/bash\nset -e\n{{s.pre_exec|default('sleep 0')}}; exec {{s.run}} 2>&1\n' > /service/{{s.name}}/run
COPY files/run /service/{{s.name}}/log
RUN chmod +x /service/{{s.name}}/run /service/{{s.name}}/log/run
{%endfor%}

RUN echo '[[ $- = *i* ]] && svstat /service/*' > /etc/profile.d/daemontools.sh && chmod 755 /etc/profile.d/daemontools.sh


RUN naemon-ctl configtest

RUN updatedb

WORKDIR /etc/naemon

EXPOSE {{ports.internal.apache}}

VOLUME ["/etc/naemon", "/var/log/naemon"]
CMD ["/usr/sbin/init"]

HEALTHCHECK --interval=2m --timeout=3s CMD curl -f http://localhost:{{ports.internal.apache}}/ || exit 1

RUN neofetch > /etc/motd


